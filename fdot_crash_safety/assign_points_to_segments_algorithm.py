# -*- coding: utf-8 -*-

"""
/***************************************************************************
 FdotCrash
                                 A QGIS plugin
 Test plugin for interfacing with public FDOT data.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-01-25
        copyright            : (C) 2023 by Seth Willis Bassett
        email                : seth.bassett@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Seth Willis Bassett'
__date__ = '2023-01-25'
__copyright__ = '(C) 2023 by Seth Willis Bassett'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'
import os
import inspect
import copy
from osgeo import gdal
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtCore import (QCoreApplication, QVariant)
from qgis.core import (QgsMessageLog, 
                       QgsProcessing,
                       QgsFeatureSource,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterField,
                       QgsProcessingParameterString,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFileDestination)

from qgis.core import (QgsFeature,
                       QgsExpression,
                       QgsFeatureSink,
                       QgsFields,
                       QgsField,
                       QgsVectorLayer,
                       QgsGeometry,
                       QgsPointXY,
                       QgsWkbTypes,                                              
                       QgsFeatureRequest)


class AssignPointsToSegments(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    LINEWORK_ID = 'LINEWORK_ID'
    LINEWORK_BMP = 'LINEWORK_BMP'
    LINEWORK_EMP = 'LINEWORK_EMP'
    CRASHSOURCE = 'CRASHSOURCE'
    YEARS = 'YEARS'
    AGGFIELD = 'AGGFIELD'
    NEWFIELD = 'NEWFIELD'
    
    allowedYears = [str(item) for item in [2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]]
    basePath = r'https://gis.fdot.gov/arcgis/rest/services/Crashes_All/FeatureServer/'
    listIds = ['All Crashes','Commercial Vehicle','Drivers 65+','Fatalities',
               'Injuries and Fatalities','Motorcycle / Moped','Bicyclist','Pedestrian',
               'Bridge','Two-way Left-Turn Lane','Work Zone','Dark Conditions',
               'Wet Weather','Aggressive Driving','Lane Change','Median Crossover',
               'Red Light Running','Speeding','Alcohol / Drug Use','Alcohol / Drugs Under Influence',
               'Seat Belt Not Used']

    # Builds a lookup for line layer
    aggregationFields = [
        'CALENDAR_YEAR', 'INJSEVER', 'INVSTGT_AGCY_CD', 'WEEKDAY_TXT', 'TRAVDIR', 'JCT_CD', 'FRST_HARM_LOC_CD', 'INTCT_TYP_CD', 'TYPESHLD', 
        'RCI_SHOULDER_TYPE_1', 'RCI_SHOULDER_TYPE_2', 'RCI_SHOULDER_TYPE_3', 'CARSTACD', 'ALCINVCD', 'LGHT_COND_CD', 
        'EVNT_WTHR_COND_CD', 'RD_SRFC_COND_CD', 'RDWY_GRDE_CD', 'RDWY_ALIGN_CD', 'TRAF_WAY_CD', 'V1_TRAF_WAY_CD', 'V2_TRAF_WAY_CD', 
        'V1TRAFCTL', 'V2TRAFCTL', 'ROADCOND1', 'ROADCOND2', 'ROADCOND3', 'ENVIRNMT1', 'ENVIRNMT2', 'ENVIRNMT3', 'IMPCT_TYP_CD', 
        'VHCL_MOVE_CD', 'D1_FRST_DR_ACTN_CD', 'D2_FRST_DR_ACTN_CD', 'LOC_WTHN_ZONE_CD', 'WRK_ZONE_TYP_CD', 'WRK_PRSNT_CD', 'LAW_ENFRC_PRSNT_CD', 
        'SCHL_BUS_REL_CD', 'WRONGWAY_IND', 'WORKZONE_IND', 'COMMERCIAL_VEHICLE_IND', 'INTERSECTION_IND', 'LANE_DEPARTURE_IND', 'SPEEDING_IND', 
        'AGGRESSIVE_DRIVING_IND', 'IMPAIRED_DRIVER_IND', 'IMPAIRED_PEDESTRIAN_IND', 'IMPAIRED_BICYCLIST_IND', 'DISTRACTED_DRIVER_IND', 
        'SPEEDING_AGGRESSIVE_IND', 'PEDESTRIAN_RELATED_IND', 'BICYCLIST_RELATED_IND', 'PEDESTRIAN_BICYCLIST_IND', 'MOTORCYCLE_INVOLVED_IND', 
        'NO_BELT_IND', 'NO_BELT_AGE_1_4_IND', 'NO_BELT_AGE_5_12_IND', 'NO_BELT_AGE_13_17_IND', 
        'AGE_TEEN_IND', 'AGE_65_PLUS_IND', 'AGE_65_69_IND', 'AGE_70_74_IND', 'AGE_75_79_IND', 'AGE_80_PLUS_IND']

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                name=self.INPUT,
                description=self.tr('Input Lines'),
                types=[QgsProcessing.TypeVectorLine]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                name = self.LINEWORK_ID,
                description=self.tr('Roadway ID Column'),
                type=QgsProcessingParameterField.String,
                parentLayerParameterName=self.INPUT
                )
            )

        self.addParameter(
            QgsProcessingParameterField(
                name = self.LINEWORK_BMP,
                description=self.tr('Begin Milepost Column'),
                type=QgsProcessingParameterField.Numeric,
                parentLayerParameterName=self.INPUT
                )
            )

        self.addParameter(
            QgsProcessingParameterField(
                name = self.LINEWORK_EMP,
                description=self.tr('End Milepost Column'),
                type=QgsProcessingParameterField.Numeric,
                parentLayerParameterName=self.INPUT
                )
            )

        self.addParameter(
            QgsProcessingParameterEnum(
                name = self.CRASHSOURCE,
                description=self.tr('Crash Type'),
                options=self.listIds,
                defaultValue=0,
                optional=False)
                )
        self.addParameter(
            QgsProcessingParameterEnum(
                name = self.YEARS,
                description=self.tr('Crash Years'),
                options=self.allowedYears,
                allowMultiple = True,
                optional=False)
                )
                
        self.addParameter(
            QgsProcessingParameterEnum(
                name = self.AGGFIELD,
                description=self.tr('Crash Aggregation Field'),
                options=self.aggregationFields,
                defaultValue=0,
                optional=False)
                )

        self.addParameter(
            QgsProcessingParameterString(
                name = self.NEWFIELD,
                description=self.tr('New Crash Field Prefix'),                
                defaultValue='crashes',
                optional=False)
                )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                name = self.OUTPUT,
                description=self.tr('Output Lines'))
                )
        # self.addParameter(
        #     QgsProcessingParameterFileDestination(
        #         self.OUTPUT,
        #         self.tr('Output File'),
        #         'CSV files (*.csv)',
        #     )
        # )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        feedback.pushInfo(f'Connecting to Vector Data Source Provider: Linework')
        line_source = self.parameterAsSource(parameters, self.INPUT, context)    
        line_id_field = self.parameterAsString(parameters, self.LINEWORK_ID, context)
        line_begin_field = self.parameterAsString(parameters, self.LINEWORK_BMP, context)
        line_end_field = self.parameterAsString(parameters, self.LINEWORK_EMP, context)
        line_fields = [line_id_field, line_begin_field, line_end_field]
        feedback.setProgress(10)


        feedback.pushInfo(f'Connecting to Vector Data Source Provider: Crashes')        
        crash_layer_idx = self.parameterAsString(parameters, self.CRASHSOURCE, context)                
        crash_source = self.crashVectorLayer(crash_layer_idx)

        crash_years_idx = self.parameterAsEnums(parameters, self.YEARS, context)
        crash_years = [self.allowedYears[idx] for idx in crash_years_idx]
       
        filter_expression = []
        for year in crash_years:
            filter_part = f'"CALENDAR_YEAR" = {year}'
            filter_expression.append(filter_part)
        full_expression = ' OR '.join(filter_expression)        
        feedback.pushInfo(f'Crash Filter Expression:\n{full_expression}')
        crash_source.selectByExpression(full_expression)
        crash_ids = crash_source.selectedFeatureIds()
        feedback.pushInfo(f'{crash_source.selectedFeatureCount()} crashes selected')
        #feedback.pushInfo(f'crash_years_str: {print(crash_years_str)}')

        crash_agg_idx = self.parameterAsInt(parameters, self.AGGFIELD, context)        
        crash_agg_field = self.aggregationFields[crash_agg_idx]
        feedback.pushInfo(f'Using {crash_agg_field} as aggregation field')
        
        crash_fields = ['ROADWAYID','LOCMP', 'CALENDAR_YEAR', crash_agg_field]        
        feedback.pushInfo(f'Getting {line_source.featureCount()} line features...')        
        feedback.pushInfo(f'Getting {crash_source.selectedFeatureCount()} crash features...')
        
        
        # get a local copy of the features
        line_features = self.getUserFeatures(line_source, line_fields)                
        crash_features = self.getUserFeatures(crash_source, crash_fields, crash_ids)
        
        # build and populate lookups
        crash_lookup = self.buildAggregationLookup(crash_features, crash_agg_field)        

        new_field_pattern = self.parameterAsString(parameters, self.NEWFIELD, context)
        new_fields = line_source.fields()
        new_field_names = []
        for key in sorted(crash_lookup.keys()):
            class_name = ''.join(char for char in str(key) if char.isalnum() or char == '_')
            new_field_name = f'{new_field_pattern}_{class_name}'
            new_field_names.append((key, new_field_name))
            new_fields.append(QgsField(new_field_name, QVariant.Int))
        
        sum_field_name = f'{new_field_pattern}_sum'
        new_field_names.append(('sum', sum_field_name))
        new_fields.append(QgsField(sum_field_name, QVariant.Int))

        crash_lookup['sum'] = 0

        line_lookup = self.buildLineLookup(line_features, line_fields, crash_lookup)
        line_lookup = self.populateLineLookup(line_lookup, crash_features, crash_fields)

        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               new_fields, line_source.wkbType(), 
                                               line_source.sourceCrs())

        for z, feature in enumerate(line_features):
            attribute_map = feature.attributeMap()            
            new_feature = QgsFeature(new_fields, id = z)            
            new_feature.setGeometry(feature.geometry())    
            for key, value in attribute_map.items():
                new_feature[key] = value      

            feature_roadway = attribute_map.get(line_id_field)
            feature_pair = (attribute_map.get(line_begin_field), 
                            attribute_map.get(line_end_field))
            aggregation_values = line_lookup.get(feature_roadway).get(feature_pair)
            
            if aggregation_values:
  
                for lookup_name, field_name in new_field_names:
                    new_feature[field_name] = aggregation_values.get(lookup_name)
            sink.addFeature(new_feature, QgsFeatureSink.FastInsert)



        return {self.OUTPUT: dest_id}
        

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Assign Crashes to Segments'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """        
        return 'Crash Assignment'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return AssignPointsToSegments()

    def icon(self):
        cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        icon = QIcon(os.path.join(os.path.join(cmd_folder, 'icons/BasePointToSegment.svg')))
        return icon

    def crashVectorLayer(self, crashLayer):        
        url = os.path.join(self.basePath, crashLayer)        
        uri = f"crs='EPSG:26917' url='{url}'"
        crashSource = QgsVectorLayer(uri, 'crashes', 'arcgisfeatureserver')
        return crashSource

    def getUserFeatures(self, source, fields, ids = None):
        request = QgsFeatureRequest()
        
        # fetch all features, only agg attributes
        request = request.setSubsetOfAttributes(fields, source.fields())
        
        # fetch all features, without geometries
        request = request.setFlags(QgsFeatureRequest.NoGeometry)        
        request = request.setConnectionTimeout(-1)
        if ids:
            request = request.setFilterFids(ids)
        features = [feature for feature in source.getFeatures(request)]
        return features

    def buildAggregationLookup(self, features, aggregation_field):
        unique_values = [feature.attributeMap().get(aggregation_field) for feature in features]                
        lookup = {value:0 for value in unique_values}        
        return lookup
    
    def buildLineLookup(self, line_features, line_fields, aggregation_lookup):
        roadway, bmp, emp = line_fields
        
        # initialize lookup
        lookup = {feature.attributeMap().get(roadway):{} for feature in line_features}
        
        # populate lookup with empty aggregation lookup
        for feature in line_features:
            attribute_map = feature.attributeMap()
            id = attribute_map.get(roadway)
            linear_coordinate_pair = (attribute_map.get(bmp), attribute_map.get(emp))	
            lookup[id][linear_coordinate_pair] = copy.deepcopy(aggregation_lookup)
        return lookup

    def populateLineLookup(self, line_lookup, crash_features, crash_fields):
        roadway_field, milepost_field, calendar_year, aggregation_field = crash_fields        
        missing = {'missing':0, 'unknown':0}        
        for feature in crash_features:
            attribute_map = feature.attributeMap()
            roadway = attribute_map.get(roadway_field)            
            # When point's roadway id is not present
            if not roadway:
                # class as 'missing' + next iteration
                missing['missing'] += 1
                continue	           
            # When point's roadway id not in the line lookup
            elif not line_lookup.get(roadway):		
                # Class as 'unknown' + next iteration
                missing['unknown'] += 1        
                continue
            else:
                lrs_pairs = line_lookup.get(roadway)
                segments = [pair for pair in lrs_pairs.keys()]
                for pair in segments:
                    bmp, emp = pair		
                    milepost = attribute_map.get(milepost_field)
                    aggregation_value = attribute_map.get(aggregation_field)
                    if milepost: 
                        if milepost >= bmp and milepost < emp:
                            line_lookup[roadway][pair][aggregation_value] += 1
                            line_lookup[roadway][pair]['sum'] += 1
        return(line_lookup)
